name: Manual Deploy

# Triggered manually from GitHub UI
on:
  workflow_dispatch:
    inputs:
      app:
        description: "Which app to deploy?"
        required: true
        type: choice
        options:
          - waitlist
          - web
          - tutorials
          - chat
          - admin
          - programs
          - coding-challenges
          - teams
          - job-board
          - store
          - docs
      environment:
        description: "Deploy to which environment?"
        required: true
        type: choice
        options:
          - development
          - production
        default: development
      skip_build:
        description: "Skip build step? (use existing build)"
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build ${{ inputs.app }}
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Install dependencies
        run: npm install

      # Build only the selected app and its dependencies
      - name: Build ${{ inputs.app }}
        run: npx turbo run build --filter=${{ inputs.app }}

      # Upload build artifacts for deploy job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-build
          path: |
            apps/${{ inputs.app }}/dist
            apps/${{ inputs.app }}/.next
            apps/${{ inputs.app }}/build
          retention-days: 1

  deploy:
    name: Deploy ${{ inputs.app }} to ${{ inputs.environment }}
    needs: build
    if: ${{ always() && !failure() }}
    runs-on: ubuntu-latest
    container: ghcr.io/railwayapp/cli:latest
    environment: ${{ inputs.environment }}
    env:
      # Use different Railway tokens based on environment
      RAILWAY_TOKEN: ${{ inputs.environment == 'production' && secrets.RAILWAY_TOKEN_PROD || secrets.RAILWAY_TOKEN_DEV }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download build artifacts
        if: ${{ !inputs.skip_build }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.app }}-build
          path: apps/${{ inputs.app }}

      # Deploy based on selected app and environment
      - name: Deploy ${{ inputs.app }} to Railway
        run: |
          case "${{ inputs.app }}" in
            waitlist)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_WAITLIST_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_WAITLIST_DEV_SERVICE_ID }}"
              fi
              ;;
            web)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_WEB_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_WEB_DEV_SERVICE_ID }}"
              fi
              ;;
            tutorials)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_TUTORIALS_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_TUTORIALS_DEV_SERVICE_ID }}"
              fi
              ;;
            chat)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_CHAT_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_CHAT_DEV_SERVICE_ID }}"
              fi
              ;;
            admin)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_ADMIN_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_ADMIN_DEV_SERVICE_ID }}"
              fi
              ;;
            programs)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_PROGRAMS_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_PROGRAMS_DEV_SERVICE_ID }}"
              fi
              ;;
            coding-challenges)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_CODING_CHALLENGES_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_CODING_CHALLENGES_DEV_SERVICE_ID }}"
              fi
              ;;
            teams)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_TEAMS_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_TEAMS_DEV_SERVICE_ID }}"
              fi
              ;;
            job-board)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_JOB_BOARD_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_JOB_BOARD_DEV_SERVICE_ID }}"
              fi
              ;;
            store)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_STORE_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_STORE_DEV_SERVICE_ID }}"
              fi
              ;;
            docs)
              if [ "${{ inputs.environment }}" = "production" ]; then
                SERVICE_ID="${{ secrets.RAILWAY_DOCS_PROD_SERVICE_ID }}"
              else
                SERVICE_ID="${{ secrets.RAILWAY_DOCS_DEV_SERVICE_ID }}"
              fi
              ;;
            *)
              echo "❌ Unknown app: ${{ inputs.app }}"
              exit 1
              ;;
          esac

          if [ -z "${SERVICE_ID}" ]; then
            echo "❌ SERVICE_ID not found for ${{ inputs.app }} in ${{ inputs.environment }}"
            echo "Please ensure the secret is configured in GitHub repository settings."
            exit 1
          fi

          echo "🚀 Deploying ${{ inputs.app }} to ${{ inputs.environment }}"
          echo "Service ID: ${SERVICE_ID}"
          railway up --service=${SERVICE_ID}
        working-directory: apps/${{ inputs.app }}

      - name: Deployment summary
        run: |
          echo "### 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **App:** ${{ inputs.app }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** ${{ inputs.skip_build && 'Skipped (reused existing)' || 'Fresh build' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
